# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-11-25 23:59
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import reports.jsonfield.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ABI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('private', models.TextField(blank=True)),
                ('public', models.TextField()),
                ('files', models.TextField(blank=True)),
                ('dump', models.CharField(blank=True, max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Arch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='BuildService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('namespace', models.CharField(max_length=50, unique=True)),
                ('apiurl', models.CharField(max_length=250, unique=True)),
                ('weburl', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='DocService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('weburl', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Graph',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('direction', models.IntegerField(choices=[(0, b'normal'), (1, b'reverse'), (2, b'both')])),
                ('depth', models.PositiveIntegerField(blank=True, default=3, null=True)),
                ('packages', models.TextField(blank=True, null=True)),
                ('dot', models.FileField(upload_to=b'graph')),
                ('svg', models.FileField(null=True, upload_to=b'graph')),
                ('pkg_meta', reports.jsonfield.fields.JSONField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=250)),
                ('url_file', models.CharField(max_length=250)),
                ('urls', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IssueTracker',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('re', models.CharField(max_length=100)),
                ('url', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='LocalizationService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250, unique=True)),
                ('apiurl', models.CharField(blank=True, max_length=250, null=True)),
                ('weburl', models.CharField(blank=True, max_length=250, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PackageMetaChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='PackageMetaType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField()),
                ('allow_multiple', models.BooleanField()),
                ('default', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repo.PackageMetaChoice')),
            ],
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pointer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('public', models.BooleanField(default=False)),
                ('factory', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('buildservice', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='repo.BuildService')),
                ('request_target', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='request_source', to='repo.Project')),
            ],
        ),
        migrations.CreateModel(
            name='Repo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repo_path', models.CharField(max_length=250)),
                ('release', models.CharField(max_length=250)),
                ('release_date', models.DateField(blank=True, null=True)),
                ('archs', models.ManyToManyField(blank=True, to='repo.Arch')),
                ('components', models.ManyToManyField(blank=True, related_name='containers', to='repo.Repo')),
                ('platform', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repo.Platform')),
                ('projects', models.ManyToManyField(blank=True, to='repo.Project')),
            ],
        ),
        migrations.CreateModel(
            name='RepoServer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(max_length=250, unique=True)),
                ('buildservice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repo.BuildService')),
            ],
        ),
        migrations.AddField(
            model_name='repo',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repo.RepoServer'),
        ),
        migrations.AddField(
            model_name='pointer',
            name='target',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repo.Repo'),
        ),
        migrations.AddField(
            model_name='packagemetachoice',
            name='metatype',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='choices', to='repo.PackageMetaType'),
        ),
        migrations.AddField(
            model_name='note',
            name='repo',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='repo.Repo'),
        ),
        migrations.AddField(
            model_name='issuetracker',
            name='platform',
            field=models.ManyToManyField(blank=True, to='repo.Platform'),
        ),
        migrations.AddField(
            model_name='image',
            name='container_repo',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='repo.Repo'),
        ),
        migrations.AddField(
            model_name='image',
            name='repo',
            field=models.ManyToManyField(blank=True, to='repo.Repo'),
        ),
        migrations.AddField(
            model_name='graph',
            name='image',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='repo.Image'),
        ),
        migrations.AddField(
            model_name='graph',
            name='repo',
            field=models.ManyToManyField(blank=True, to='repo.Repo'),
        ),
        migrations.AddField(
            model_name='abi',
            name='version',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='repo.Pointer'),
        ),
        migrations.AlterUniqueTogether(
            name='repo',
            unique_together=set([('server', 'repo_path')]),
        ),
    ]
